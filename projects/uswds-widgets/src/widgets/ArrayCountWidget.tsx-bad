import React from "react";
import { BaseWidgetProps } from "../types";

export type ArrayCountWidgetProps = BaseWidgetProps & {
  value?: any[]|undefined;
  options: {
    countOffset?: number;
    widgetClassNames?: string;
    autocomplete?: boolean;
    title?: string;
  }
  onBlur?: (id: string) => void;
  onChange: (elems: any[]|undefined) => void;
};

type ArrayCountWidgetState = {
  userCount: string|undefined;
};

export default class ArrayCountWidget extends
    React.Component<ArrayCountWidgetProps, ArrayCountWidgetState>
{
  constructor(props: ArrayCountWidgetProps) {
    super(props);
    this.state = {
      userCount: props.value
        ? String(props.value.length - (this.props.options.countOffset || 0))
        : undefined
    };
  }
  componentDidUpdate(prevProps: ArrayCountWidgetProps, prevState: ArrayCountWidgetState) {
    if (prevState.userCount !== this.state.userCount) {
      let count = parseInt(this.state.userCount || "0", 10);
      if (isNaN(count)) {
        count = 0;
      }
      // Too high of a count can crash the browser. We’ve been using
      // this for marriage counts and 29 is the record, so 29 seems like
      // a good upper limit. Filling out more than 29 pages is probably
      // not reasonable in a form anyway
      if (count > 29) {
        count = 29;
      }
      this.props.onChange(this.getValue(count, this.props.value));
    }
  }
  // We’re expanding or contracting the array based on the count
  // and returning undefined if the array should be empty
  getValue = (count: number, value:Array<Object> = []) => {
    if (count === 0) {
      return undefined;
    }
    const intCount = count + (this.props.options.countOffset || 0);
    if (intCount < 0) {
      return undefined;
    }
    if (intCount < value.length) {
      return value.slice(0, intCount);
    }
    return Array(intCount - value.length)
      .fill({})
      .concat(value);
  };
  updateArrayLength = (event: React.ChangeEvent<any>) => {
    this.setState({ userCount: event.target.value });
  };
  render() {
    const props = this.props;
    return (
      <input
        type="number"
        step="1"
        min="1"
        id={props.id}
        name={props.id}
        disabled={props.disabled}
        autoComplete={String(props.options.autocomplete || false)}
        className={props.options.widgetClassNames}
        value={
          typeof this.state.userCount === "undefined"
            ? ""
            : this.state.userCount
        }
        onBlur={() => props.onBlur && props.onBlur(props.id)}
        onChange={this.updateArrayLength}
      />
    );
  }
}
